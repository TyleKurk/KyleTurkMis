#installing the required packages/libraries

#this line installs both wikipedia-api and requests

# you could install separately if you wish by 'import requests'

# and 'import wikipediaapi'

# Set up OpenRouter API key
openrouter_api_key = 'your_api_key_here'

# Function to fetch summary from Wikipedia
def fetch_wikipedia_summary(query):
    user_agent = 'Myapp/1.0 (djangonearmel17@gmail.com) Information search'  # Customize with your app's details
    headers = {'User-Agent': user_agent}
    wiki_wiki = wikipediaapi.Wikipedia('en', headers=headers)
    page = wiki_wiki.page(query)

    if page.exists():
        return page.summary
    else:
        return None

# Function to generate content based on the retrieved information
def generate_text_from_data(wikipedia_summary):
    prompt = "Based on the following information from Wikipedia, provide a detailed explanation:\n\n"
    if wikipedia_summary:
        prompt += f"Wikipedia Summary:\n{wikipedia_summary}\n\n"
    # Sending prompt to OpenRouter API
    headers = {
        "Authorization": f"Bearer {openrouter_api_key}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openai/gpt-3.5-turbo",  # Use the OpenRouter-supported model
        "messages": [{"role": "system", "content": "You are a helpful assistant."},
                     {"role": "user", "content": prompt}],
        "max_tokens": 300
    }
    response = requests.post('https://openrouter.ai/api/v1/chat/completions', headers=headers, json=data)
    if response.status_code == 200:
        response_data = response.json()
        return response_data['choices'][0]['message']['content'].strip()
    else:
        return "No content generated by OpenRouter."

# Main function to create RAG application
def rag_application(query):
    # Step 1: Retrieve information from Wikipedia

    summary = fetch_wikipedia_summary(query)

    # Step 2: Use the OpenRouter model to generate further text based on the retrieved information
    if summary:
        generated_text = generate_text_from_data(summary)
        print("Generated Response: ")
        print(generated_text)
    else:
        print(f"No information found for {query}")

# Example usage
if __name__ == "__main__":